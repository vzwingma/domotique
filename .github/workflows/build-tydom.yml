# This is a basic workflow to help you get started with Actions

name: Build Tydom Bridge Docker Image

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, tydom ]
  pull_request:
    branches: [ master, tydom ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # Push image to DockerHub
  build-push:

    runs-on: ubuntu-latest

    env:      
      DOCKER_REGISTRY: registry.hub.docker.com
      DOCKER_IMAGE: vzwingmadomatic/domoticz-tydom
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}  
      DOCKER_TARGET_PLATFORM: linux/arm/v6
      DOCKER_IMAGE_TAG: $DOCKER_IMAGE:snapshot

    if: github.event_name == 'push'

    permissions:
      contents: read

    steps:
      - 
        name: Checkout the code  
        uses: actions/checkout@v2
      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Log into registry
        run: echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
      - 
        name: Get image metadata
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo $DOCKER_IMAGE":"$VERSION >> $DOCKER_IMAGE_TAG

      - name: Build ARM image
        run: |
          cp tydom-bridge/* _docker/build_tydom
          cd _docker/build_tydom
          docker buildx build --platform $DOCKER_TARGET_PLATFORM  --file Dockerfile --tag $DOCKER_IMAGE_TAG --output type=image,push=true .
 #         docker tag $IMAGE_NAME $IMAGE_NAME:$VERSION
 #         docker push $IMAGE_NAME:$VERSION
