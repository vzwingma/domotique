# This is a basic workflow to help you get started with Actions

name: Build HTTPD ARM Docker Image

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, feat/httpd ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Push image to DockerHub
  build-push-httpdomoticz:
    environment: PROD
    runs-on: ubuntu-latest
    env:      
      DOCKER_REGISTRY: registry.hub.docker.com
      DOCKER_IMAGE: vzwingmadomatic/httpd
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}  
      DOCKER_TARGET_PLATFORM: linux/arm/v7

    permissions:
      contents: read
    steps:
      - 
        name: Checkout the code  
        uses: actions/checkout@v2
      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Log into registry
        run: echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
      - 
        name: Get image metadata
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE:$VERSION" >> $GITHUB_ENV
      - 
        name: extract certificate from secrets
        run: |
          echo "${{ env.HTTPDDOMOTICZSERVER_CERT }}" >> _docker/build_httpd/httpddomoticzserver.crt
          echo "${{ env.HTTPDDOMOTICZSERVER_KEY }}" >> _docker/build_httpd/httpddomoticzserver.key
          cat _docker/build_httpd/httpddomoticzserver.crt
        shell: bash
        env:
          HTTPDDOMOTICZSERVER_CERT : ${{ secrets.HTTPDDOMOTICZSERVER_CERT }}
          HTTPDDOMOTICZSERVER_KEY : ${{ secrets.HTTPDDOMOTICZSERVER_KEY }}
      -
        name: Update config in HTTPD.conf
        run: |
          cd _docker/build_httpd
          sed -e 's/__RULES_ACCESS_1__/${{ secrets.RULES_ACCESS_1 }}/g' -e 's/__RULES_ACCESS_2__/${{ secrets.RULES_ACCESS_2 }}/g' -e 's/__RULES_ACCESS_3__/${{ secrets.RULES_ACCESS_3 }}/g' httpd.conf;
          cat "***********************"
          cat httpd.conf
      - name: Build ARM image
        run: |
          cd _docker/build_httpd
          docker buildx build --platform ${{ env.DOCKER_TARGET_PLATFORM }}  --file Dockerfile --tag ${{ env.DOCKER_IMAGE_TAG }} --output type=image,push=true .
